'''
When you install memory_profiler, it also gives us access to 
mprof executable from the command line/shell. 
The mprof provides us information about the usage of 
memory overtime of the execution of the script. 

This can be very useful for analysis to understand 
in which part of the script is taking more memory as well as when
 the memory usage is rising. The mprof records memory usage at 
 each timestamp when the script is running and stores it in a .dat file. 
 
 It also provides plotting
 functionality which plots memory usage as a function of time using matplotlib.

 created a simple script below which has three functions each 
 having the same code for generating a random array of size 1000x1000.

Each function stops for some amount 
 of time, generates a random array, takes a mean of an array, 
 and returns it.
'''
import time
import numpy as np
from memory_profiler import profile

@profile
def very_slow_random_generator():
    time.sleep(5)
    arr1 = np.random.randint(1, 100, size=(1000, 1000))
    avg = arr1.mean()
    return avg


@profile
def slow_random_generator():
    time.sleep(2)
    arr1 = np.random.randint(1, 100, size=(1000, 1000))
    avg = arr1.mean()
    return avg


@profile
def fast_random_generator():
    time.sleep(1)
    arr1 = np.random.randint(1, 100, size=(1000, 1000))
    avg = arr1.mean()
    return avg


def main_func():
    fast_random_generator()
    slow_random_generator()
    very_slow_random_generator()


if __name__ == '__main__':
    main_func()

#mprof run example4.py
'''
The above command will execute the script and generate the new file by 
name mprofile_20201006095840.dat.

We can now call plotting functionality using the below command to 
plot usage of memory.
c:\pythonapp\day4\profiling\>mprof plot

The above command will take the latest .dat file generated and plot it 
using matplotlib. 

commands available with mprof:
•	mprof list - It'll list all .dat files generated by mprof.
•	mprof clean - It'll clean all .dat files.
•	mprof rm - It can be useful to remove any particular .dat file.

snakeviz:

c:\>python -m cProfile -o example4.prof example4.py

We can then call the below command to launch snakeviz visualization
 in the browser.

c:\>snakeviz example.prof
'''
